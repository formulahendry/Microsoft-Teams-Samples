// This file is automatically generated by Teams Toolkit.
// The teamsfx tasks defined in this file require Teams Toolkit version >= 4.1.0.
// See https://aka.ms/teamsfx-debug-tasks for details on how to customize each task and how to integrate with existing Teams Toolkit projects.
{
    "version": "2.0.0",
    "tasks": [
        {
            "label": "Start Teams App Locally",
            "dependsOn": [
                "Validate prerequisites",
                "Start local tunnel",
                "Create resources",
                "Build project",
                "Start application"
            ],
            "dependsOrder": "sequence"
        },
        {
            // Check all required prerequisites.
            // See https://aka.ms/teamsfx-check-prerequisites-task to know the details and how to customize the args.
            "label": "Validate prerequisites",
            "type": "teamsfx",
            "command": "debug-check-prerequisites",
            "args": {
                "prerequisites": [
                    "nodejs", // Validate if Node.js is installed.
                    "m365Account", // Sign-in prompt for Microsoft 365 account, then validate if the account enables the sideloading permission.
                    "portOccupancy" // Validate available ports to ensure those debug ones are not occupied.
                ],
                "portOccupancy": [
                    53000 // tab service port
                ]
            }
        },
        {
            // Start the local tunnel service to forward public ngrok URL to local port and inspect traffic.
            // See https://aka.ms/teamsfx-tasks/local-tunnel for the detailed args definitions,
            // as well as samples to:
            //   - use your own ngrok command / configuration / binary
            //   - use your own tunnel solution
            //   - provide alternatives if ngrok does not work on your dev machine
            "label": "Start local tunnel",
            "type": "teamsfx",
            "command": "debug-start-local-tunnel",
            "args": {
                "ngrokArgs": "http 53000 --log=stdout --log-format=logfmt",
                "env": "local",
                "output": {
                    "endpoint": "TAB_ENDPOINT",
                    "domain": "TAB_DOMAIN"
                }
            },
            "isBackground": true,
            "problemMatcher": "$teamsfx-local-tunnel-watch"
        },
        {
            // Create the debug resources.
            // See https://aka.ms/teamsfx-provision-task to know the details and how to customize the args.
            "label": "Create resources",
            "type": "teamsfx",
            "command": "provision",
            "args": {
                "template": "${workspaceFolder}/teamsapp.local.yml",
                "env": "local"
            }
        },
        {
            // Build project.
            // See https://aka.ms/teamsfx-deploy-task to know the details and how to customize the args.
            "label": "Build project",
            "type": "teamsfx",
            "command": "deploy",
            "args": {
                "template": "${workspaceFolder}/teamsapp.local.yml",
                "env": "local"
            }
        },
        {
            "label": "Start application",
            "dependsOn": [
                "Start frontend"
            ]
        },
        {
            "label": "Start frontend",
            "type": "shell",
            // load teamsfx runtime settings and execute `npm run start`
            "command": "npx env-cmd --silent -f .localSettings npm run start",
            "isBackground": true,
            "options": {
                "cwd": "${workspaceFolder}"
            },
            "problemMatcher": {
                "pattern": {
                    "regexp": "^.*$",
                    "file": 0,
                    "location": 1,
                    "message": 2
                },
                "background": {
                    "activeOnStart": true,
                    "beginsPattern": ".*", // the output/signal that service is starting
                    "endsPattern": ".*" // the output/signal that service is started
                }
            }
        }
    ]
}